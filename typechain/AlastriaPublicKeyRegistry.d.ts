/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AlastriaPublicKeyRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addKey(string)": FunctionFragment;
    "deletePublicKey(string)": FunctionFragment;
    "getCurrentPublicKey(address)": FunctionFragment;
    "getPublicKeyStatus(address,bytes32)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "previousPublishedVersion()": FunctionFragment;
    "publicKeyList(address,uint256)": FunctionFragment;
    "revokePublicKey(string)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addKey", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deletePublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyStatus",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "previousPublishedVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publicKeyList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePublicKey",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deletePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousPublishedVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicKeyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "PublicKeyDeleted(string)": EventFragment;
    "PublicKeyRevoked(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PublicKeyDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicKeyRevoked"): EventFragment;
}

export class AlastriaPublicKeyRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AlastriaPublicKeyRegistryInterface;

  functions: {
    addKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deletePublicKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deletePublicKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCurrentPublicKey(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getCurrentPublicKey(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPublicKeyStatus(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        exists: boolean;
        status: number;
        startDate: BigNumber;
        endDate: BigNumber;
      }
    >;

    "getPublicKeyStatus(address,bytes32)"(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        exists: boolean;
        status: number;
        startDate: BigNumber;
        endDate: BigNumber;
      }
    >;

    initialize(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    previousPublishedVersion(overrides?: CallOverrides): Promise<[string]>;

    "previousPublishedVersion()"(overrides?: CallOverrides): Promise<[string]>;

    publicKeyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "publicKeyList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    revokePublicKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokePublicKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    "version()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addKey(
    publicKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addKey(string)"(
    publicKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deletePublicKey(
    publicKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deletePublicKey(string)"(
    publicKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCurrentPublicKey(
    subject: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getCurrentPublicKey(address)"(
    subject: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getPublicKeyStatus(
    subject: string,
    publicKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber] & {
      exists: boolean;
      status: number;
      startDate: BigNumber;
      endDate: BigNumber;
    }
  >;

  "getPublicKeyStatus(address,bytes32)"(
    subject: string,
    publicKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber] & {
      exists: boolean;
      status: number;
      startDate: BigNumber;
      endDate: BigNumber;
    }
  >;

  initialize(
    _previousPublishedVersion: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _previousPublishedVersion: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  previousPublishedVersion(overrides?: CallOverrides): Promise<string>;

  "previousPublishedVersion()"(overrides?: CallOverrides): Promise<string>;

  publicKeyList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "publicKeyList(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  revokePublicKey(
    publicKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokePublicKey(string)"(
    publicKey: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  "version()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addKey(publicKey: string, overrides?: CallOverrides): Promise<void>;

    "addKey(string)"(
      publicKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePublicKey(
      publicKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deletePublicKey(string)"(
      publicKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentPublicKey(
      subject: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getCurrentPublicKey(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getPublicKeyStatus(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        exists: boolean;
        status: number;
        startDate: BigNumber;
        endDate: BigNumber;
      }
    >;

    "getPublicKeyStatus(address,bytes32)"(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber] & {
        exists: boolean;
        status: number;
        startDate: BigNumber;
        endDate: BigNumber;
      }
    >;

    initialize(
      _previousPublishedVersion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    previousPublishedVersion(overrides?: CallOverrides): Promise<string>;

    "previousPublishedVersion()"(overrides?: CallOverrides): Promise<string>;

    publicKeyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "publicKeyList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    revokePublicKey(
      publicKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokePublicKey(string)"(
      publicKey: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    PublicKeyDeleted(publicKey: null): EventFilter;

    PublicKeyRevoked(publicKey: null): EventFilter;
  };

  estimateGas: {
    addKey(publicKey: string, overrides?: Overrides): Promise<BigNumber>;

    "addKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deletePublicKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deletePublicKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCurrentPublicKey(
      subject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentPublicKey(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPublicKeyStatus(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPublicKeyStatus(address,bytes32)"(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    previousPublishedVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "previousPublishedVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    publicKeyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "publicKeyList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokePublicKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokePublicKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deletePublicKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deletePublicKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCurrentPublicKey(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentPublicKey(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublicKeyStatus(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPublicKeyStatus(address,bytes32)"(
      subject: string,
      publicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    previousPublishedVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previousPublishedVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicKeyList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "publicKeyList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokePublicKey(
      publicKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokePublicKey(string)"(
      publicKey: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
