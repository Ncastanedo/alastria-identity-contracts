/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AlastriaCredentialRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addIssuerCredential(bytes32)": FunctionFragment;
    "addSubjectCredential(bytes32,string)": FunctionFragment;
    "deleteSubjectCredential(bytes32)": FunctionFragment;
    "getCredentialStatus(uint8,uint8)": FunctionFragment;
    "getIssuerCredentialStatus(address,bytes32)": FunctionFragment;
    "getSubjectCredentialList(address)": FunctionFragment;
    "getSubjectCredentialStatus(address,bytes32)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "issuerCredentialList(address,uint256)": FunctionFragment;
    "previousPublishedVersion()": FunctionFragment;
    "subjectCredentialList(address,uint256)": FunctionFragment;
    "subjectCredentialRegistry(address,bytes32)": FunctionFragment;
    "updateCredentialStatus(bytes32,uint8)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addIssuerCredential",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSubjectCredential",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSubjectCredential",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCredentialStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuerCredentialStatus",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectCredentialList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubjectCredentialStatus",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "issuerCredentialList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previousPublishedVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subjectCredentialList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subjectCredentialRegistry",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCredentialStatus",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addIssuerCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSubjectCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSubjectCredential",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCredentialStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIssuerCredentialStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectCredentialList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubjectCredentialStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuerCredentialList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousPublishedVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectCredentialList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subjectCredentialRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCredentialStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "IssuerCredentialRevoked(bytes32,uint8)": EventFragment;
    "SubjectCredentialDeleted(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IssuerCredentialRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubjectCredentialDeleted"): EventFragment;
}

export class AlastriaCredentialRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AlastriaCredentialRegistryInterface;

  functions: {
    addIssuerCredential(
      issuerCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addIssuerCredential(bytes32)"(
      issuerCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addSubjectCredential(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addSubjectCredential(bytes32,string)"(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteSubjectCredential(
      subjectCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteSubjectCredential(bytes32)"(
      subjectCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCredentialStatus(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getCredentialStatus(uint8,uint8)"(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getIssuerCredentialStatus(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    "getIssuerCredentialStatus(address,bytes32)"(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    getSubjectCredentialList(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    "getSubjectCredentialList(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    getSubjectCredentialStatus(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    "getSubjectCredentialStatus(address,bytes32)"(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    initialize(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    issuerCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "issuerCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    previousPublishedVersion(overrides?: CallOverrides): Promise<[string]>;

    "previousPublishedVersion()"(overrides?: CallOverrides): Promise<[string]>;

    subjectCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "subjectCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    subjectCredentialRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string] & {
        exists: boolean;
        status: number;
        URI: string;
      }
    >;

    "subjectCredentialRegistry(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string] & {
        exists: boolean;
        status: number;
        URI: string;
      }
    >;

    updateCredentialStatus(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCredentialStatus(bytes32,uint8)"(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    "version()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addIssuerCredential(
    issuerCredentialHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addIssuerCredential(bytes32)"(
    issuerCredentialHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addSubjectCredential(
    subjectCredentialHash: BytesLike,
    URI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addSubjectCredential(bytes32,string)"(
    subjectCredentialHash: BytesLike,
    URI: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteSubjectCredential(
    subjectCredentialHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteSubjectCredential(bytes32)"(
    subjectCredentialHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCredentialStatus(
    subjectStatus: BigNumberish,
    issuerStatus: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "getCredentialStatus(uint8,uint8)"(
    subjectStatus: BigNumberish,
    issuerStatus: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getIssuerCredentialStatus(
    issuer: string,
    issuerCredentialHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { exists: boolean; status: number }>;

  "getIssuerCredentialStatus(address,bytes32)"(
    issuer: string,
    issuerCredentialHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { exists: boolean; status: number }>;

  getSubjectCredentialList(
    subject: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string[]]>;

  "getSubjectCredentialList(address)"(
    subject: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string[]]>;

  getSubjectCredentialStatus(
    subject: string,
    subjectCredentialHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { exists: boolean; status: number }>;

  "getSubjectCredentialStatus(address,bytes32)"(
    subject: string,
    subjectCredentialHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<[boolean, number] & { exists: boolean; status: number }>;

  initialize(
    _previousPublishedVersion: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _previousPublishedVersion: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  issuerCredentialList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "issuerCredentialList(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  previousPublishedVersion(overrides?: CallOverrides): Promise<string>;

  "previousPublishedVersion()"(overrides?: CallOverrides): Promise<string>;

  subjectCredentialList(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "subjectCredentialList(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  subjectCredentialRegistry(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, string] & { exists: boolean; status: number; URI: string }
  >;

  "subjectCredentialRegistry(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, string] & { exists: boolean; status: number; URI: string }
  >;

  updateCredentialStatus(
    issuerCredentialHash: BytesLike,
    status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCredentialStatus(bytes32,uint8)"(
    issuerCredentialHash: BytesLike,
    status: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  "version()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addIssuerCredential(
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "addIssuerCredential(bytes32)"(
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addSubjectCredential(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addSubjectCredential(bytes32,string)"(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteSubjectCredential(
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleteSubjectCredential(bytes32)"(
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCredentialStatus(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "getCredentialStatus(uint8,uint8)"(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getIssuerCredentialStatus(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    "getIssuerCredentialStatus(address,bytes32)"(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    getSubjectCredentialList(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    "getSubjectCredentialList(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string[]]>;

    getSubjectCredentialStatus(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    "getSubjectCredentialStatus(address,bytes32)"(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean, number] & { exists: boolean; status: number }>;

    initialize(
      _previousPublishedVersion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: CallOverrides
    ): Promise<void>;

    issuerCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "issuerCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    previousPublishedVersion(overrides?: CallOverrides): Promise<string>;

    "previousPublishedVersion()"(overrides?: CallOverrides): Promise<string>;

    subjectCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "subjectCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    subjectCredentialRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string] & {
        exists: boolean;
        status: number;
        URI: string;
      }
    >;

    "subjectCredentialRegistry(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string] & {
        exists: boolean;
        status: number;
        URI: string;
      }
    >;

    updateCredentialStatus(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCredentialStatus(bytes32,uint8)"(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    IssuerCredentialRevoked(
      issuerCredentialHash: null,
      status: null
    ): EventFilter;

    SubjectCredentialDeleted(subjectCredentialHash: null): EventFilter;
  };

  estimateGas: {
    addIssuerCredential(
      issuerCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addIssuerCredential(bytes32)"(
      issuerCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addSubjectCredential(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addSubjectCredential(bytes32,string)"(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteSubjectCredential(
      subjectCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteSubjectCredential(bytes32)"(
      subjectCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCredentialStatus(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCredentialStatus(uint8,uint8)"(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIssuerCredentialStatus(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIssuerCredentialStatus(address,bytes32)"(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubjectCredentialList(
      subject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubjectCredentialList(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubjectCredentialStatus(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubjectCredentialStatus(address,bytes32)"(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    issuerCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "issuerCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previousPublishedVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "previousPublishedVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    subjectCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subjectCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subjectCredentialRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subjectCredentialRegistry(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCredentialStatus(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCredentialStatus(bytes32,uint8)"(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addIssuerCredential(
      issuerCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addIssuerCredential(bytes32)"(
      issuerCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addSubjectCredential(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addSubjectCredential(bytes32,string)"(
      subjectCredentialHash: BytesLike,
      URI: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteSubjectCredential(
      subjectCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteSubjectCredential(bytes32)"(
      subjectCredentialHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCredentialStatus(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCredentialStatus(uint8,uint8)"(
      subjectStatus: BigNumberish,
      issuerStatus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIssuerCredentialStatus(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIssuerCredentialStatus(address,bytes32)"(
      issuer: string,
      issuerCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubjectCredentialList(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubjectCredentialList(address)"(
      subject: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubjectCredentialStatus(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubjectCredentialStatus(address,bytes32)"(
      subject: string,
      subjectCredentialHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _previousPublishedVersion: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    issuerCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "issuerCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previousPublishedVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "previousPublishedVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subjectCredentialList(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subjectCredentialList(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subjectCredentialRegistry(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subjectCredentialRegistry(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCredentialStatus(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCredentialStatus(bytes32,uint8)"(
      issuerCredentialHash: BytesLike,
      status: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
