/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AlastriaPublicKeyRegistry } from "../AlastriaPublicKeyRegistry";

export class AlastriaPublicKeyRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<AlastriaPublicKeyRegistry> {
    return super.deploy(overrides || {}) as Promise<AlastriaPublicKeyRegistry>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AlastriaPublicKeyRegistry {
    return super.attach(address) as AlastriaPublicKeyRegistry;
  }
  connect(signer: Signer): AlastriaPublicKeyRegistry__factory {
    return super.connect(signer) as AlastriaPublicKeyRegistry__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AlastriaPublicKeyRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AlastriaPublicKeyRegistry;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "publicKey",
        type: "string",
      },
    ],
    name: "PublicKeyDeleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "publicKey",
        type: "string",
      },
    ],
    name: "PublicKeyRevoked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "publicKey",
        type: "string",
      },
    ],
    name: "addKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "publicKey",
        type: "string",
      },
    ],
    name: "deletePublicKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subject",
        type: "address",
      },
    ],
    name: "getCurrentPublicKey",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "subject",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "publicKey",
        type: "bytes32",
      },
    ],
    name: "getPublicKeyStatus",
    outputs: [
      {
        internalType: "bool",
        name: "exists",
        type: "bool",
      },
      {
        internalType: "enum AlastriaPublicKeyRegistry.Status",
        name: "status",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "startDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endDate",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_previousPublishedVersion",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "previousPublishedVersion",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "publicKeyList",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "publicKey",
        type: "string",
      },
    ],
    name: "revokePublicKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b81806100206000396000f3fe608060405234801561001057600080fd5b506004361061009f577c010000000000000000000000000000000000000000000000000000000060003504631226f6a581146100a457806331f7f2591461010857806336241962146101a357806350382c1a1461024b57806354fd4d50146102f15780636104464f1461030b578063c000ceee1461032f578063c4d66de81461035b578063d16df8ec14610381575b600080fd5b6100d0600480360360408110156100ba57600080fd5b50600160a060020a038135169060200135610427565b6040518085151581526020018460018111156100e857fe5b815260200183815260200182815260200194505050505060405180910390f35b61012e6004803603602081101561011e57600080fd5b5035600160a060020a0316610487565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610168578181015183820152602001610150565b50505050905090810190601f1680156101955780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610249600480360360208110156101b957600080fd5b8101906020810181356401000000008111156101d457600080fd5b8201836020820111156101e657600080fd5b8035906020019184600183028401116401000000008311171561020857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610596945050505050565b005b6102496004803603602081101561026157600080fd5b81019060208101813564010000000081111561027c57600080fd5b82018360208201111561028e57600080fd5b803590602001918460018302840111640100000000831117156102b057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061067c945050505050565b6102f9610792565b60408051918252519081900360200190f35b610313610798565b60408051600160a060020a039092168252519081900360200190f35b61012e6004803603604081101561034557600080fd5b50600160a060020a0381351690602001356107a7565b6102496004803603602081101561037157600080fd5b5035600160a060020a031661085e565b6102496004803603602081101561039757600080fd5b8101906020810181356401000000008111156103b257600080fd5b8201836020820111156103c457600080fd5b803590602001918460018302840111640100000000831117156103e657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610947945050505050565b600080808085600160a060020a03811661044057600080fd5b50505050600160a060020a03929092166000908152600360209081526040808320938352929052208054600182015460029092015460ff8083169561010090930416935090565b606081600160a060020a03811661049d57600080fd5b600160a060020a0383166000908152600460205260409020541561057d57600160a060020a0383166000908152600460205260409020805460001981019081106104e357fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152928301828280156105715780601f1061054657610100808354040283529160200191610571565b820191906000526020600020905b81548152906001019060200180831161055457829003601f168201915b50505050509150610590565b6040518060200160405280600081525091505b50919050565b336000908152600360205260408120816105af846109ff565b81526020810191909152604001600020805490915060ff161561067857805461ff00191661010017815542600282015560408051602080825284518183015284517f590ada3b231515dd26dca05728f31024554fc0eca9ef33aa1d623bc4d7d5fd50938693928392918301919085019080838360005b8381101561063d578181015183820152602001610625565b50505050905090810190601f16801561066a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a15b5050565b33600090815260036020526040812090610695836109ff565b815260208101919091526040016000205460ff16156106b357600080fd5b426106c56106c033610487565b610947565b604080516080810182526001815260006020808301829052828401859052606083018290523382526003905291822090916106ff856109ff565b81526020808201929092526040016000208251815460ff191690151517808255918301519091829061ff00191661010083600181111561073b57fe5b021790555060408281015160018084019190915560609093015160029092019190915533600090815260046020908152918120805493840181558152819020845161078d939190910191850190610a7c565b505050565b60015481565b600254600160a060020a031681565b600460205281600052604060002081815481106107c357600080fd5b600091825260209182902001805460408051601f600260001961010060018716150201909416939093049283018590048502810185019091528181529450909250908301828280156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b505050505081565b600054610100900460ff16806108775750610877610a76565b80610885575060005460ff16155b6108da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610b1e602e913960400191505060405180910390fd5b600054610100900460ff16158015610905576000805460ff1961ff0019909116610100171660011790555b60046001556002805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790558015610678576000805461ff00191690555050565b33600090815260036020526040812081610960846109ff565b81526020810191909152604001600020805490915060ff168015610999575060018154610100900460ff16600181111561099657fe5b14155b156106785742600282015560408051602080825284518183015284517f41d9cf228775966745bd16590f046aff534ab47ea15fc80127ddae02abc8bf3493869392839291830191908501908083836000831561063d578181015183820152602001610625565b6000816040516020018082805190602001908083835b60208310610a345780518252601f199092019160209182019101610a15565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b303b1590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282610ab25760008555610af8565b82601f10610acb57805160ff1916838001178555610af8565b82800160010185558215610af8579182015b82811115610af8578251825591602001919060010190610add565b50610b04929150610b08565b5090565b5b80821115610b045760008155600101610b0956fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212205fd162e02159c374e5f21334d910d0bd95ef08ec0cf053c174f85d71d309b38064736f6c63430007060033";
